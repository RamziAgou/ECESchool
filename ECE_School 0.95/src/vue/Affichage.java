package Vue;


import controleur.*;
import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.sql.SQLException;
import static java.time.Clock.system;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import modele.*;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author cynth
 */
public class Affichage extends JFrame{

    /**
     * Creates new form Affichage
     */
    private static Ecole ecole = new Ecole();
    private static Eleve elev = new Eleve();    
    public Affichage() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        panelMenu = new javax.swing.JPanel();
        buttonEleves = new javax.swing.JButton();
        buttonEnseignants = new javax.swing.JButton();
        buttonDisciplines = new javax.swing.JButton();
        buttonClasses = new javax.swing.JButton();
        buttonNiveau = new javax.swing.JButton();
        panelDisciplines = new javax.swing.JPanel();
        accueilDisciplines = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tabDisciplines = new javax.swing.JTable();
        addDiscpline = new javax.swing.JButton();
        ajoutDiscipline = new javax.swing.JTextField();
        deleteDiscipline = new javax.swing.JButton();
        panelNiveau = new javax.swing.JPanel();
        accueilNiveau = new javax.swing.JPanel();
        jLabel17 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        tabNiveaux = new javax.swing.JTable();
        ajoutNiveau = new javax.swing.JTextField();
        addNiveau = new javax.swing.JButton();
        deleteNiveau = new javax.swing.JButton();
        panelEleves = new javax.swing.JPanel();
        accueilEleves = new javax.swing.JPanel();
        fieldEleves = new javax.swing.JTextField();
        buttonRechercheEleve = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        buttonAjoutBulletin = new javax.swing.JButton();
        reportingEleves = new javax.swing.JButton();
        jScrollPane7 = new javax.swing.JScrollPane();
        tabEleves = new javax.swing.JTable();
        classeEleve = new javax.swing.JComboBox<>();
        addEleve = new javax.swing.JButton();
        deleteEleve = new javax.swing.JButton();
        updateEleve = new javax.swing.JButton();
        nomEleve = new javax.swing.JTextField();
        prenomEleve = new javax.swing.JTextField();
        detailsEleve = new javax.swing.JButton();
        ajouterBulletin = new javax.swing.JPanel();
        labelBulletin = new javax.swing.JLabel();
        finBulletin = new javax.swing.JTextField();
        appBulletin = new javax.swing.JTextField();
        debutBulletin = new javax.swing.JTextField();
        anneeBulletin = new javax.swing.JTextField();
        trimestreBulletin = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        buttonBulletin = new javax.swing.JButton();
        rechercherEleve = new javax.swing.JPanel();
        fieldApp = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        bulletinEleve = new javax.swing.JTable();
        UpdateApp = new javax.swing.JButton();
        trimestre1 = new javax.swing.JButton();
        trimestre2 = new javax.swing.JButton();
        trimestre3 = new javax.swing.JButton();
        jLabel12 = new javax.swing.JLabel();
        detailsBulletin = new javax.swing.JButton();
        labelEleve = new javax.swing.JLabel();
        fieldDiscipline = new javax.swing.JComboBox<>();
        fieldProf = new javax.swing.JComboBox<>();
        addDB = new javax.swing.JButton();
        reportEleves = new javax.swing.JPanel();
        detailsBulletinEleve = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabDetailsBulletin = new javax.swing.JTable();
        newNote = new javax.swing.JTextField();
        newApp = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        add = new javax.swing.JButton();
        update = new javax.swing.JButton();
        delete = new javax.swing.JButton();
        panelClasses = new javax.swing.JPanel();
        accueilClasses = new javax.swing.JPanel();
        jScrollPane8 = new javax.swing.JScrollPane();
        tabClasses = new javax.swing.JTable();
        nomClasse = new javax.swing.JTextField();
        anneeClasse = new javax.swing.JTextField();
        niveauClasse = new javax.swing.JComboBox<>();
        addClasse = new javax.swing.JButton();
        deleteClasse = new javax.swing.JButton();
        detailsClasse = new javax.swing.JButton();
        rechercherClasse = new javax.swing.JPanel();
        jScrollPane9 = new javax.swing.JScrollPane();
        tabProfsClasse = new javax.swing.JTable();
        jScrollPane10 = new javax.swing.JScrollPane();
        tabElevesClasse = new javax.swing.JTable();
        nomProfClasse = new javax.swing.JTextField();
        disciplineProfClasse = new javax.swing.JTextField();
        addProfClasse = new javax.swing.JButton();
        labelDetailsClasse = new javax.swing.JLabel();
        panelEnseignants = new javax.swing.JPanel();
        accueilEnseignants = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        fieldEnseignants = new javax.swing.JTextField();
        buttonRechercheEnseignant = new javax.swing.JButton();
        reportingProfs = new javax.swing.JButton();
        jScrollPane6 = new javax.swing.JScrollPane();
        tabProfs = new javax.swing.JTable();
        nomProf = new javax.swing.JTextField();
        prenomProf = new javax.swing.JTextField();
        addProf = new javax.swing.JButton();
        deleteProf = new javax.swing.JButton();
        disciplineProf = new javax.swing.JComboBox<>();
        detailsProf = new javax.swing.JButton();
        reportEnseignants = new javax.swing.JPanel();
        rechercherEnseignant = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        tabClassesProf = new javax.swing.JTable();
        comboClassesProf = new javax.swing.JComboBox<>();
        addClasseProf = new javax.swing.JButton();
        deleteClasseProf = new javax.swing.JButton();
        labelProf = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        menuAccueil = new javax.swing.JMenu();
        menuEleves = new javax.swing.JMenu();
        menuEnseignants = new javax.swing.JMenu();
        menuDisciplines = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setLayout(new java.awt.CardLayout());

        panelMenu.setBackground(new java.awt.Color(0, 153, 153));

        buttonEleves.setBackground(new java.awt.Color(255, 51, 51));
        buttonEleves.setText("El√®ves");
        buttonEleves.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonElevesActionPerformed(evt);
            }
        });

        buttonEnseignants.setBackground(new java.awt.Color(255, 51, 51));
        buttonEnseignants.setText("Enseignants");
        buttonEnseignants.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonEnseignantsActionPerformed(evt);
            }
        });

        buttonDisciplines.setBackground(new java.awt.Color(255, 51, 51));
        buttonDisciplines.setText("Disciplines");
        buttonDisciplines.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonDisciplinesActionPerformed(evt);
            }
        });

        buttonClasses.setText("Classes");
        buttonClasses.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonClassesActionPerformed(evt);
            }
        });

        buttonNiveau.setText("Niveau");
        buttonNiveau.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonNiveauActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelMenuLayout = new javax.swing.GroupLayout(panelMenu);
        panelMenu.setLayout(panelMenuLayout);
        panelMenuLayout.setHorizontalGroup(
            panelMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelMenuLayout.createSequentialGroup()
                .addGap(154, 154, 154)
                .addComponent(buttonEleves)
                .addGap(147, 147, 147)
                .addComponent(buttonEnseignants)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 390, Short.MAX_VALUE)
                .addComponent(buttonDisciplines)
                .addGap(41, 41, 41))
            .addGroup(panelMenuLayout.createSequentialGroup()
                .addGap(219, 219, 219)
                .addComponent(buttonClasses)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(buttonNiveau)
                .addGap(171, 171, 171))
        );
        panelMenuLayout.setVerticalGroup(
            panelMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelMenuLayout.createSequentialGroup()
                .addGap(126, 126, 126)
                .addGroup(panelMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonEleves)
                    .addComponent(buttonDisciplines)
                    .addComponent(buttonEnseignants))
                .addGap(91, 91, 91)
                .addGroup(panelMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonClasses)
                    .addComponent(buttonNiveau))
                .addContainerGap(749, Short.MAX_VALUE))
        );

        jPanel1.add(panelMenu, "card5");

        panelDisciplines.setBackground(new java.awt.Color(255, 51, 204));
        panelDisciplines.setLayout(new java.awt.CardLayout());

        accueilDisciplines.setBackground(new java.awt.Color(255, 51, 51));

        tabDisciplines.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Disciplines"
            }
        ));
        jScrollPane3.setViewportView(tabDisciplines);

        addDiscpline.setText("Ajouter");

        deleteDiscipline.setText("Supprimer");

        javax.swing.GroupLayout accueilDisciplinesLayout = new javax.swing.GroupLayout(accueilDisciplines);
        accueilDisciplines.setLayout(accueilDisciplinesLayout);
        accueilDisciplinesLayout.setHorizontalGroup(
            accueilDisciplinesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(accueilDisciplinesLayout.createSequentialGroup()
                .addGap(252, 252, 252)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(accueilDisciplinesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(accueilDisciplinesLayout.createSequentialGroup()
                        .addGap(98, 98, 98)
                        .addComponent(ajoutDiscipline, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(accueilDisciplinesLayout.createSequentialGroup()
                        .addGap(49, 49, 49)
                        .addComponent(addDiscpline, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(65, 65, 65)
                        .addComponent(deleteDiscipline, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(301, Short.MAX_VALUE))
        );
        accueilDisciplinesLayout.setVerticalGroup(
            accueilDisciplinesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(accueilDisciplinesLayout.createSequentialGroup()
                .addGroup(accueilDisciplinesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(accueilDisciplinesLayout.createSequentialGroup()
                        .addGap(44, 44, 44)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, accueilDisciplinesLayout.createSequentialGroup()
                        .addGap(91, 91, 91)
                        .addComponent(ajoutDiscipline, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(accueilDisciplinesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(addDiscpline)
                            .addComponent(deleteDiscipline))))
                .addContainerGap(763, Short.MAX_VALUE))
        );

        panelDisciplines.add(accueilDisciplines, "card3");

        jPanel1.add(panelDisciplines, "card5");

        panelNiveau.setLayout(new java.awt.CardLayout());

        jLabel17.setText("Voici la liste des niveaux de l'√©cole");

        tabNiveaux.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Niveaux"
            }
        ));
        jScrollPane4.setViewportView(tabNiveaux);

        ajoutNiveau.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ajoutNiveauActionPerformed(evt);
            }
        });

        addNiveau.setText("Ajouter un niveau");

        deleteNiveau.setText("Supprimer un niveau");

        javax.swing.GroupLayout accueilNiveauLayout = new javax.swing.GroupLayout(accueilNiveau);
        accueilNiveau.setLayout(accueilNiveauLayout);
        accueilNiveauLayout.setHorizontalGroup(
            accueilNiveauLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(accueilNiveauLayout.createSequentialGroup()
                .addGroup(accueilNiveauLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(accueilNiveauLayout.createSequentialGroup()
                        .addGap(329, 329, 329)
                        .addComponent(jLabel17))
                    .addGroup(accueilNiveauLayout.createSequentialGroup()
                        .addGap(110, 110, 110)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(accueilNiveauLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(accueilNiveauLayout.createSequentialGroup()
                                .addGap(62, 62, 62)
                                .addComponent(addNiveau)
                                .addGap(71, 71, 71)
                                .addComponent(deleteNiveau))
                            .addGroup(accueilNiveauLayout.createSequentialGroup()
                                .addGap(137, 137, 137)
                                .addComponent(ajoutNiveau, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(326, Short.MAX_VALUE))
        );
        accueilNiveauLayout.setVerticalGroup(
            accueilNiveauLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, accueilNiveauLayout.createSequentialGroup()
                .addGroup(accueilNiveauLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(accueilNiveauLayout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addComponent(jLabel17)
                        .addGap(38, 38, 38)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(accueilNiveauLayout.createSequentialGroup()
                        .addGap(113, 113, 113)
                        .addComponent(ajoutNiveau, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(accueilNiveauLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(addNiveau)
                            .addComponent(deleteNiveau))))
                .addContainerGap(789, Short.MAX_VALUE))
        );

        panelNiveau.add(accueilNiveau, "card3");

        jPanel1.add(panelNiveau, "card7");

        panelEleves.setBackground(new java.awt.Color(0, 255, 102));
        panelEleves.setLayout(new java.awt.CardLayout());

        accueilEleves.setBackground(new java.awt.Color(0, 255, 204));

        fieldEleves.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fieldElevesActionPerformed(evt);
            }
        });

        buttonRechercheEleve.setText("Valider");
        buttonRechercheEleve.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonRechercheEleveActionPerformed(evt);
            }
        });

        jLabel1.setText("Rechercher un √©l√®ve");

        buttonAjoutBulletin.setText("Ajouter un bulletin");

        reportingEleves.setText("Reporting des √©l√®ves");
        reportingEleves.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reportingElevesActionPerformed(evt);
            }
        });

        tabEleves.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Noms", "Pr√©noms", "Classes"
            }
        ));
        tabEleves.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tabElevesMouseClicked(evt);
            }
        });
        jScrollPane7.setViewportView(tabEleves);

        addEleve.setText("Ajouter");

        deleteEleve.setText("Supprimer");

        updateEleve.setText("Modifier la classe");
        updateEleve.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateEleveActionPerformed(evt);
            }
        });

        prenomEleve.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                prenomEleveActionPerformed(evt);
            }
        });

        detailsEleve.setText("Acc√©der aux d√©tails de l'√©l√®ve");

        javax.swing.GroupLayout accueilElevesLayout = new javax.swing.GroupLayout(accueilEleves);
        accueilEleves.setLayout(accueilElevesLayout);
        accueilElevesLayout.setHorizontalGroup(
            accueilElevesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(accueilElevesLayout.createSequentialGroup()
                .addGroup(accueilElevesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(accueilElevesLayout.createSequentialGroup()
                        .addGap(230, 230, 230)
                        .addComponent(buttonAjoutBulletin)
                        .addGap(118, 118, 118)
                        .addComponent(detailsEleve, javax.swing.GroupLayout.PREFERRED_SIZE, 214, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(accueilElevesLayout.createSequentialGroup()
                        .addGap(104, 104, 104)
                        .addGroup(accueilElevesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(accueilElevesLayout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(52, 52, 52)
                                .addComponent(fieldEleves, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(41, 41, 41)
                                .addComponent(buttonRechercheEleve)))
                        .addGroup(accueilElevesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(accueilElevesLayout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(addEleve, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(38, 38, 38)
                                .addComponent(deleteEleve))
                            .addGroup(accueilElevesLayout.createSequentialGroup()
                                .addGap(112, 112, 112)
                                .addGroup(accueilElevesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(prenomEleve, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(classeEleve, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(nomEleve, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                .addGap(15, 15, 15)
                .addGroup(accueilElevesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(reportingEleves, javax.swing.GroupLayout.DEFAULT_SIZE, 142, Short.MAX_VALUE)
                    .addComponent(updateEleve, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        accueilElevesLayout.setVerticalGroup(
            accueilElevesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(accueilElevesLayout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(accueilElevesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fieldEleves, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buttonRechercheEleve)
                    .addComponent(jLabel1))
                .addGap(50, 50, 50)
                .addGroup(accueilElevesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(accueilElevesLayout.createSequentialGroup()
                        .addComponent(nomEleve, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(prenomEleve, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(classeEleve, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(33, 33, 33)
                        .addGroup(accueilElevesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(addEleve)
                            .addComponent(deleteEleve)
                            .addComponent(updateEleve)))
                    .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 243, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(104, 104, 104)
                .addGroup(accueilElevesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonAjoutBulletin)
                    .addComponent(reportingEleves)
                    .addComponent(detailsEleve))
                .addContainerGap(523, Short.MAX_VALUE))
        );

        panelEleves.add(accueilEleves, "card2");

        finBulletin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                finBulletinActionPerformed(evt);
            }
        });

        appBulletin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                appBulletinActionPerformed(evt);
            }
        });

        debutBulletin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                debutBulletinActionPerformed(evt);
            }
        });

        anneeBulletin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                anneeBulletinActionPerformed(evt);
            }
        });

        trimestreBulletin.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Selectionner le trimestre", "1", "2", "3" }));

        jLabel4.setText("Date d√©but");

        jLabel5.setText("Ann√©e");

        jLabel6.setText("Date fin");

        jLabel7.setText("Trimestre");

        jLabel8.setText("Appr√©ciation g√©n√©rale:");

        buttonBulletin.setText("Valider");

        javax.swing.GroupLayout ajouterBulletinLayout = new javax.swing.GroupLayout(ajouterBulletin);
        ajouterBulletin.setLayout(ajouterBulletinLayout);
        ajouterBulletinLayout.setHorizontalGroup(
            ajouterBulletinLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ajouterBulletinLayout.createSequentialGroup()
                .addGroup(ajouterBulletinLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(ajouterBulletinLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(ajouterBulletinLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(ajouterBulletinLayout.createSequentialGroup()
                                .addGap(170, 170, 170)
                                .addComponent(labelBulletin, javax.swing.GroupLayout.PREFERRED_SIZE, 234, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(ajouterBulletinLayout.createSequentialGroup()
                                .addGap(43, 43, 43)
                                .addGroup(ajouterBulletinLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(47, 47, 47)
                                .addGroup(ajouterBulletinLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(finBulletin, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(anneeBulletin, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(appBulletin, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(trimestreBulletin, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(debutBulletin, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, ajouterBulletinLayout.createSequentialGroup()
                            .addGap(43, 43, 43)
                            .addGroup(ajouterBulletinLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(ajouterBulletinLayout.createSequentialGroup()
                        .addGap(254, 254, 254)
                        .addComponent(buttonBulletin)))
                .addContainerGap(563, Short.MAX_VALUE))
        );
        ajouterBulletinLayout.setVerticalGroup(
            ajouterBulletinLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ajouterBulletinLayout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(labelBulletin, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29)
                .addGroup(ajouterBulletinLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(debutBulletin, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(ajouterBulletinLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(finBulletin, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26)
                .addGroup(ajouterBulletinLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(anneeBulletin, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(ajouterBulletinLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(appBulletin, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26)
                .addGroup(ajouterBulletinLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(trimestreBulletin, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(39, 39, 39)
                .addComponent(buttonBulletin)
                .addContainerGap(578, Short.MAX_VALUE))
        );

        panelEleves.add(ajouterBulletin, "card7");

        fieldApp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fieldAppActionPerformed(evt);
            }
        });

        bulletinEleve.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Disciplines", "Enseignants", "Moyennes", "Appreciations"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        bulletinEleve.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                bulletinEleveMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(bulletinEleve);

        UpdateApp.setText("Modifier l'appreciation");
        UpdateApp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UpdateAppActionPerformed(evt);
            }
        });

        trimestre1.setText("Trimestre 1");
        trimestre1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                trimestre1ActionPerformed(evt);
            }
        });

        trimestre2.setText("Trimestre 2");

        trimestre3.setText("Trimestre 3");

        jLabel12.setText("Changer l'appr√©ciation selectionn√©e");

        detailsBulletin.setText("Afficher le detail de la matiere");

        addDB.setText("Ajouter un d√©tail bulletin");

        javax.swing.GroupLayout rechercherEleveLayout = new javax.swing.GroupLayout(rechercherEleve);
        rechercherEleve.setLayout(rechercherEleveLayout);
        rechercherEleveLayout.setHorizontalGroup(
            rechercherEleveLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(rechercherEleveLayout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addGroup(rechercherEleveLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(rechercherEleveLayout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 530, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(rechercherEleveLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(rechercherEleveLayout.createSequentialGroup()
                                .addGap(39, 39, 39)
                                .addComponent(detailsBulletin, javax.swing.GroupLayout.PREFERRED_SIZE, 245, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(rechercherEleveLayout.createSequentialGroup()
                                .addGap(61, 61, 61)
                                .addGroup(rechercherEleveLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(fieldDiscipline, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(fieldApp, javax.swing.GroupLayout.DEFAULT_SIZE, 185, Short.MAX_VALUE)
                                    .addComponent(fieldProf, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addGroup(rechercherEleveLayout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(UpdateApp)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(addDB))))
                    .addGroup(rechercherEleveLayout.createSequentialGroup()
                        .addGap(35, 35, 35)
                        .addComponent(labelEleve, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(204, 204, 204)
                        .addComponent(trimestre1)
                        .addGap(61, 61, 61)
                        .addComponent(trimestre2)
                        .addGap(88, 88, 88)
                        .addComponent(trimestre3)))
                .addContainerGap(74, Short.MAX_VALUE))
            .addGroup(rechercherEleveLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(rechercherEleveLayout.createSequentialGroup()
                    .addGap(618, 618, 618)
                    .addComponent(jLabel12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGap(162, 162, 162)))
        );
        rechercherEleveLayout.setVerticalGroup(
            rechercherEleveLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(rechercherEleveLayout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addGroup(rechercherEleveLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(trimestre1)
                    .addComponent(trimestre2)
                    .addComponent(trimestre3)
                    .addComponent(labelEleve, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(118, 118, 118)
                .addGroup(rechercherEleveLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(rechercherEleveLayout.createSequentialGroup()
                        .addComponent(fieldDiscipline, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(fieldProf, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(fieldApp, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(rechercherEleveLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(UpdateApp)
                            .addComponent(addDB))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(detailsBulletin))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(617, Short.MAX_VALUE))
            .addGroup(rechercherEleveLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(rechercherEleveLayout.createSequentialGroup()
                    .addGap(157, 157, 157)
                    .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(834, Short.MAX_VALUE)))
        );

        panelEleves.add(rechercherEleve, "card5");

        javax.swing.GroupLayout reportElevesLayout = new javax.swing.GroupLayout(reportEleves);
        reportEleves.setLayout(reportElevesLayout);
        reportElevesLayout.setHorizontalGroup(
            reportElevesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 967, Short.MAX_VALUE)
        );
        reportElevesLayout.setVerticalGroup(
            reportElevesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1012, Short.MAX_VALUE)
        );

        panelEleves.add(reportEleves, "card5");

        tabDetailsBulletin.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Notes", "Appreciations"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tabDetailsBulletin.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tabDetailsBulletinMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tabDetailsBulletin);
        if (tabDetailsBulletin.getColumnModel().getColumnCount() > 0) {
            tabDetailsBulletin.getColumnModel().getColumn(1).setHeaderValue("Appreciations");
        }

        jLabel2.setText("Note");

        jLabel23.setText("Appreciation");

        add.setText("Ajouter");

        update.setText("Modifier");
        update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateActionPerformed(evt);
            }
        });

        delete.setText("Supprimer");

        javax.swing.GroupLayout detailsBulletinEleveLayout = new javax.swing.GroupLayout(detailsBulletinEleve);
        detailsBulletinEleve.setLayout(detailsBulletinEleveLayout);
        detailsBulletinEleveLayout.setHorizontalGroup(
            detailsBulletinEleveLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(detailsBulletinEleveLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 273, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(detailsBulletinEleveLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(detailsBulletinEleveLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(detailsBulletinEleveLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel23)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(28, 28, 28)
                        .addGroup(detailsBulletinEleveLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(newNote, javax.swing.GroupLayout.DEFAULT_SIZE, 152, Short.MAX_VALUE)
                            .addComponent(newApp, javax.swing.GroupLayout.DEFAULT_SIZE, 152, Short.MAX_VALUE))
                        .addGap(71, 71, 71))
                    .addGroup(detailsBulletinEleveLayout.createSequentialGroup()
                        .addGap(49, 49, 49)
                        .addComponent(add)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 369, Short.MAX_VALUE)
                        .addComponent(update)
                        .addGap(18, 18, 18)
                        .addComponent(delete)
                        .addGap(27, 27, 27))))
        );
        detailsBulletinEleveLayout.setVerticalGroup(
            detailsBulletinEleveLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(detailsBulletinEleveLayout.createSequentialGroup()
                .addGroup(detailsBulletinEleveLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(detailsBulletinEleveLayout.createSequentialGroup()
                        .addGap(101, 101, 101)
                        .addGroup(detailsBulletinEleveLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(newNote, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(23, 23, 23)
                        .addGroup(detailsBulletinEleveLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(newApp, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel23))
                        .addGap(18, 18, 18)
                        .addGroup(detailsBulletinEleveLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(add)
                            .addComponent(delete)
                            .addComponent(update)))
                    .addGroup(detailsBulletinEleveLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 322, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(679, Short.MAX_VALUE))
        );

        panelEleves.add(detailsBulletinEleve, "card6");

        jPanel1.add(panelEleves, "card4");

        panelClasses.setLayout(new java.awt.CardLayout());

        tabClasses.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Noms", "Ann√©es scolaires", "Niveaux"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane8.setViewportView(tabClasses);

        anneeClasse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                anneeClasseActionPerformed(evt);
            }
        });

        addClasse.setText("Ajouter une classe");

        deleteClasse.setText("Supprimer une classe");

        detailsClasse.setText("Acc√©der aux d√©tails de la classe");
        detailsClasse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                detailsClasseActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout accueilClassesLayout = new javax.swing.GroupLayout(accueilClasses);
        accueilClasses.setLayout(accueilClassesLayout);
        accueilClassesLayout.setHorizontalGroup(
            accueilClassesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(accueilClassesLayout.createSequentialGroup()
                .addGap(82, 82, 82)
                .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(accueilClassesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(accueilClassesLayout.createSequentialGroup()
                        .addGap(122, 122, 122)
                        .addGroup(accueilClassesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(nomClasse)
                            .addComponent(anneeClasse)
                            .addComponent(niveauClasse, 0, 113, Short.MAX_VALUE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, accueilClassesLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 42, Short.MAX_VALUE)
                        .addComponent(addClasse)
                        .addGap(35, 35, 35)
                        .addComponent(deleteClasse)
                        .addGap(102, 102, 102))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, accueilClassesLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(detailsClasse)
                .addGap(157, 157, 157))
        );
        accueilClassesLayout.setVerticalGroup(
            accueilClassesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(accueilClassesLayout.createSequentialGroup()
                .addGroup(accueilClassesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(accueilClassesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(addClasse)
                        .addComponent(deleteClasse))
                    .addGroup(accueilClassesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(accueilClassesLayout.createSequentialGroup()
                            .addGap(45, 45, 45)
                            .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(accueilClassesLayout.createSequentialGroup()
                            .addGap(61, 61, 61)
                            .addComponent(nomClasse, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(anneeClasse, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(niveauClasse, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(detailsClasse)
                .addContainerGap(739, Short.MAX_VALUE))
        );

        panelClasses.add(accueilClasses, "card4");

        tabProfsClasse.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Noms", "Disciplines"
            }
        ));
        jScrollPane9.setViewportView(tabProfsClasse);

        tabElevesClasse.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Noms", "Pr√©noms"
            }
        ));
        jScrollPane10.setViewportView(tabElevesClasse);

        addProfClasse.setText("Ajouter un enseignant ");

        javax.swing.GroupLayout rechercherClasseLayout = new javax.swing.GroupLayout(rechercherClasse);
        rechercherClasse.setLayout(rechercherClasseLayout);
        rechercherClasseLayout.setHorizontalGroup(
            rechercherClasseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(rechercherClasseLayout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addComponent(jScrollPane9, javax.swing.GroupLayout.PREFERRED_SIZE, 276, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(52, 52, 52)
                .addGroup(rechercherClasseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(rechercherClasseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(nomProfClasse)
                        .addComponent(disciplineProfClasse, javax.swing.GroupLayout.DEFAULT_SIZE, 129, Short.MAX_VALUE))
                    .addComponent(addProfClasse))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 39, Short.MAX_VALUE)
                .addComponent(jScrollPane10, javax.swing.GroupLayout.PREFERRED_SIZE, 276, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(131, 131, 131))
            .addGroup(rechercherClasseLayout.createSequentialGroup()
                .addGap(303, 303, 303)
                .addComponent(labelDetailsClasse, javax.swing.GroupLayout.PREFERRED_SIZE, 226, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        rechercherClasseLayout.setVerticalGroup(
            rechercherClasseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(rechercherClasseLayout.createSequentialGroup()
                .addGap(58, 58, 58)
                .addComponent(labelDetailsClasse, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(rechercherClasseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(rechercherClasseLayout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addGroup(rechercherClasseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane10, javax.swing.GroupLayout.PREFERRED_SIZE, 307, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane9, javax.swing.GroupLayout.PREFERRED_SIZE, 307, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(rechercherClasseLayout.createSequentialGroup()
                        .addGap(79, 79, 79)
                        .addComponent(nomProfClasse, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(disciplineProfClasse, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(30, 30, 30)
                        .addComponent(addProfClasse)))
                .addContainerGap(577, Short.MAX_VALUE))
        );

        panelClasses.add(rechercherClasse, "card3");

        jPanel1.add(panelClasses, "card6");

        panelEnseignants.setBackground(new java.awt.Color(255, 255, 102));
        panelEnseignants.setLayout(new java.awt.CardLayout());

        accueilEnseignants.setBackground(new java.awt.Color(153, 255, 102));

        jLabel3.setText("Rechercher un enseignant");

        buttonRechercheEnseignant.setText("Valider");
        buttonRechercheEnseignant.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonRechercheEnseignantActionPerformed(evt);
            }
        });

        reportingProfs.setText("Reporting des enseignants");

        tabProfs.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nom", "Pr√©nom", "Disciplines"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tabProfs.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tabProfsMouseClicked(evt);
            }
        });
        jScrollPane6.setViewportView(tabProfs);

        prenomProf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                prenomProfActionPerformed(evt);
            }
        });

        addProf.setText("Ajouter un professeur");
        addProf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addProfActionPerformed(evt);
            }
        });

        deleteProf.setText("Supprimer un professeur");

        detailsProf.setText("Acceder aux d√©tails du prof");

        javax.swing.GroupLayout accueilEnseignantsLayout = new javax.swing.GroupLayout(accueilEnseignants);
        accueilEnseignants.setLayout(accueilEnseignantsLayout);
        accueilEnseignantsLayout.setHorizontalGroup(
            accueilEnseignantsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(accueilEnseignantsLayout.createSequentialGroup()
                .addGap(68, 68, 68)
                .addGroup(accueilEnseignantsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(accueilEnseignantsLayout.createSequentialGroup()
                        .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(accueilEnseignantsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(accueilEnseignantsLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 77, Short.MAX_VALUE)
                                .addComponent(addProf)
                                .addGap(31, 31, 31)
                                .addComponent(deleteProf))
                            .addGroup(accueilEnseignantsLayout.createSequentialGroup()
                                .addGroup(accueilEnseignantsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(accueilEnseignantsLayout.createSequentialGroup()
                                        .addGap(88, 88, 88)
                                        .addComponent(detailsProf, javax.swing.GroupLayout.PREFERRED_SIZE, 216, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(accueilEnseignantsLayout.createSequentialGroup()
                                        .addGap(114, 114, 114)
                                        .addGroup(accueilEnseignantsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(nomProf)
                                            .addComponent(prenomProf)
                                            .addComponent(disciplineProf, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addGroup(accueilEnseignantsLayout.createSequentialGroup()
                        .addGap(143, 143, 143)
                        .addComponent(jLabel3)
                        .addGap(27, 27, 27)
                        .addComponent(fieldEnseignants, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(32, 32, 32)
                        .addComponent(buttonRechercheEnseignant))
                    .addGroup(accueilEnseignantsLayout.createSequentialGroup()
                        .addGap(236, 236, 236)
                        .addComponent(reportingProfs)))
                .addGap(49, 49, 49))
        );
        accueilEnseignantsLayout.setVerticalGroup(
            accueilEnseignantsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(accueilEnseignantsLayout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addGroup(accueilEnseignantsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(fieldEnseignants, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buttonRechercheEnseignant))
                .addGroup(accueilEnseignantsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(accueilEnseignantsLayout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 239, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(accueilEnseignantsLayout.createSequentialGroup()
                        .addGap(33, 33, 33)
                        .addComponent(nomProf, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(prenomProf, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(disciplineProf, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(accueilEnseignantsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(addProf)
                            .addComponent(deleteProf))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(detailsProf, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(30, 30, 30)
                .addComponent(reportingProfs)
                .addContainerGap(617, Short.MAX_VALUE))
        );

        panelEnseignants.add(accueilEnseignants, "card3");

        javax.swing.GroupLayout reportEnseignantsLayout = new javax.swing.GroupLayout(reportEnseignants);
        reportEnseignants.setLayout(reportEnseignantsLayout);
        reportEnseignantsLayout.setHorizontalGroup(
            reportEnseignantsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 967, Short.MAX_VALUE)
        );
        reportEnseignantsLayout.setVerticalGroup(
            reportEnseignantsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1012, Short.MAX_VALUE)
        );

        panelEnseignants.add(reportEnseignants, "card2");

        tabClassesProf.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Classes"
            }
        ));
        jScrollPane5.setViewportView(tabClassesProf);

        addClasseProf.setText("Ajouter une classe");

        deleteClasseProf.setText("Supprimer une classe");

        javax.swing.GroupLayout rechercherEnseignantLayout = new javax.swing.GroupLayout(rechercherEnseignant);
        rechercherEnseignant.setLayout(rechercherEnseignantLayout);
        rechercherEnseignantLayout.setHorizontalGroup(
            rechercherEnseignantLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(rechercherEnseignantLayout.createSequentialGroup()
                .addGap(79, 79, 79)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(rechercherEnseignantLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(rechercherEnseignantLayout.createSequentialGroup()
                        .addGap(46, 46, 46)
                        .addComponent(addClasseProf)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(deleteClasseProf))
                    .addGroup(rechercherEnseignantLayout.createSequentialGroup()
                        .addGap(65, 65, 65)
                        .addComponent(comboClassesProf, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGap(66, 66, 66))
            .addGroup(rechercherEnseignantLayout.createSequentialGroup()
                .addGap(109, 109, 109)
                .addComponent(labelProf, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        rechercherEnseignantLayout.setVerticalGroup(
            rechercherEnseignantLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(rechercherEnseignantLayout.createSequentialGroup()
                .addGroup(rechercherEnseignantLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(rechercherEnseignantLayout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addComponent(labelProf, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(30, 30, 30)
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(rechercherEnseignantLayout.createSequentialGroup()
                        .addGap(113, 113, 113)
                        .addComponent(comboClassesProf, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(43, 43, 43)
                        .addGroup(rechercherEnseignantLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(addClasseProf)
                            .addComponent(deleteClasseProf))))
                .addContainerGap(718, Short.MAX_VALUE))
        );

        panelEnseignants.add(rechercherEnseignant, "card5");

        jPanel1.add(panelEnseignants, "card3");

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);

        jMenuBar1.setBackground(new java.awt.Color(255, 51, 51));
        jMenuBar1.setForeground(new java.awt.Color(255, 51, 51));

        menuAccueil.setText("Accueil");
        menuAccueil.addMenuListener(new javax.swing.event.MenuListener() {
            public void menuCanceled(javax.swing.event.MenuEvent evt) {
            }
            public void menuDeselected(javax.swing.event.MenuEvent evt) {
            }
            public void menuSelected(javax.swing.event.MenuEvent evt) {
                menuAccueilMenuSelected(evt);
            }
        });
        jMenuBar1.add(menuAccueil);

        menuEleves.setText("El√®ves");
        menuEleves.addMenuListener(new javax.swing.event.MenuListener() {
            public void menuCanceled(javax.swing.event.MenuEvent evt) {
            }
            public void menuDeselected(javax.swing.event.MenuEvent evt) {
            }
            public void menuSelected(javax.swing.event.MenuEvent evt) {
                menuElevesMenuSelected(evt);
            }
        });
        jMenuBar1.add(menuEleves);

        menuEnseignants.setText("Enseignants");
        menuEnseignants.addMenuListener(new javax.swing.event.MenuListener() {
            public void menuCanceled(javax.swing.event.MenuEvent evt) {
            }
            public void menuDeselected(javax.swing.event.MenuEvent evt) {
            }
            public void menuSelected(javax.swing.event.MenuEvent evt) {
                menuEnseignantsMenuSelected(evt);
            }
        });
        jMenuBar1.add(menuEnseignants);

        menuDisciplines.setText("Disciplines");
        menuDisciplines.addMenuListener(new javax.swing.event.MenuListener() {
            public void menuCanceled(javax.swing.event.MenuEvent evt) {
            }
            public void menuDeselected(javax.swing.event.MenuEvent evt) {
            }
            public void menuSelected(javax.swing.event.MenuEvent evt) {
                menuDisciplinesMenuSelected(evt);
            }
        });
        jMenuBar1.add(menuDisciplines);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void buttonElevesActionPerformed(java.awt.event.ActionEvent evt) {                                             
        jPanel1.removeAll();
        panelEleves.removeAll();  
        panelEleves.add(accueilEleves);
        panelEleves.repaint();
        panelEleves.revalidate();
        jPanel1.add(panelEleves);
        jPanel1.repaint();
        jPanel1.revalidate(); 
        classeEleve.addItem("Selectionner la classe");
        for(int i = 0; i<ecole.getClasses().size(); i++){
            String c = ecole.getClasses().get(i).getNom();
            classeEleve.addItem(c);
        }
        DefaultTableModel model = (DefaultTableModel)tabEleves.getModel();
        for(int t = 0; t<tabEleves.getRowCount(); t++){
                model.removeRow(t);
                t--;
            } 
        for(int i = 0; i<ecole.getClasses().size(); i++){
            Classe c = ecole.getClasses().get(i);
            String classe = c.getNom();
            for(int j = 0; j<c.getEleves().size(); j++){
                String nomEleve = c.getEleves().get(j).getNom();
                String prenomEleve = c.getEleves().get(j).getPrenom();
                model.addRow(new String[]{nomEleve, prenomEleve, classe});               
            }
        }                                                               
        
        Object[] row = new Object[3];
            addEleve.addActionListener(new ActionListener(){
                @Override
                public void actionPerformed(ActionEvent e){
                    if(!"".equals(nomEleve.getText()) && !"".equals(nomEleve.getText()) && !"Selectionner la classe".equals(classeEleve.getSelectedItem())){;
                        
                        String nom_classe = classeEleve.getSelectedItem().toString();
                        String nom = nomEleve.getText();
                        String prenom = prenomEleve.getText();
                        int id_classe = 0;
                        Eleve eleve = new Eleve(0, nom, prenom);
                        for(int i=0; i<ecole.getClasses().size(); i++){
                            Classe c = ecole.getClasses().get(i);
                            if(c.getNom().equals(nom_classe)){
                                id_classe = c.getId();
                            }
                        }
                        
                        try{
                            PersonneDAO persDao = new PersonneDAO();
                            EcoleDAO ecDao = new EcoleDAO();
                            
                            if(persDao.create(eleve, id_classe)){
                                row[0] = nomEleve.getText();
                                row[1] = prenomEleve.getText();
                                row[2] = classeEleve.getSelectedItem();
                                model.addRow(row);
                                nomEleve.setText("");
                                prenomEleve.setText("");
                                classeEleve.setSelectedItem("Selectionner la classe");
                                
                                ecole = ecDao.init();
                            }
                            else JOptionPane.showMessageDialog(null,"Erreur lors de l'ajout √† la BDD" );
                        }catch(SQLException ex){
                            
                        }  
                    }
                    else{
                        JOptionPane.showMessageDialog(null,"Remplir tous la classe !" );
                    }
                }
            });

            deleteEleve.addActionListener(new ActionListener(){
                @Override
                public void actionPerformed(ActionEvent e){
                    int i = tabEleves.getSelectedRow();
                    
                    ecole.afficherEleve();
                    int cpt = 0;
                    int id_eleve = 0;
                    for(int j=0; j<ecole.getClasses().size(); j++){
                        Classe c = ecole.getClasses().get(j);
                        for(int k=0; k<c.getEleves().size(); k++){
                            Eleve ev = c.getEleves().get(k);
                            if(cpt == i){
                                id_eleve = ev.getId();
                            }
                            cpt++;
                        }
                    }
                    Eleve eleve = new Eleve(id_eleve, "", "");
                    if(i >= 0){
                        try{
                            PersonneDAO persDao = new PersonneDAO();
                            EcoleDAO ecDao = new EcoleDAO();
                            if(persDao.delete(eleve)){
                                model.removeRow(i);
                                ecDao.init();
                            }else JOptionPane.showMessageDialog(null,"Erreur lors de la suppresion BDD");
                        }catch(SQLException ex){
                            
                        }
                                                                                   
                    }
                    else{
                        JOptionPane.showMessageDialog(null,"Selectionnez l'√©l√®ve");
                    }
                }
            });
            detailsEleve.addActionListener(new ActionListener(){
            public void actionPerformed (ActionEvent e){
            int o = tabEleves.getSelectedRow();
            int cpt = 0;
                int id_eleve = 0;
                for(int j=0; j<ecole.getClasses().size(); j++){
                    Classe c = ecole.getClasses().get(j);
                    for(int k=0; k<c.getEleves().size(); k++){
                        Eleve ev = c.getEleves().get(k);
                        if(cpt == o){
                            id_eleve = ev.getId();
                        }
                        cpt++;
                    }
                }
            if(o >= 0){
                rechercherEleve(id_eleve);
            }
            else{
                JOptionPane.showMessageDialog(null, "Selectionnez un enseignant pour voir le detail !");
            }
            }
            });
            buttonAjoutBulletin.addActionListener(new ActionListener(){
            public void actionPerformed (ActionEvent e){
            int o = tabEleves.getSelectedRow();
            
            //int id = ecole.getEleves().get(o).getId();
                int cpt = 0;
                int id_eleve = 0;
                for(int j=0; j<ecole.getClasses().size(); j++){
                    Classe c = ecole.getClasses().get(j);
                    for(int k=0; k<c.getEleves().size(); k++){
                        Eleve ev = c.getEleves().get(k);
                        if(cpt == o){
                            id_eleve = ev.getId();
                        }
                        cpt++;
                    }
                }
                    if(o >= 0){
                        nouveauBulletin(id_eleve);
                    }
                    else{
                        JOptionPane.showMessageDialog(null, "Selectionnez un enseignant pour voir le detail !");
                    }
                }
            });
            
    }

    private void nouveauBulletin(int id){
        elev.setId(id);
        jPanel1.removeAll();  
        panelEleves.removeAll();
        panelEleves.add(ajouterBulletin);
        panelEleves.repaint();
        panelEleves.revalidate();
        jPanel1.add(panelEleves);
        jPanel1.repaint();
        jPanel1.revalidate();
        for(int i = 0; i<ecole.getEleves().size(); i++){
            int iDEleve= ecole.getEleves().get(i).getId();
            String nomEleve= ecole.getEleves().get(i).getNom();
            String prenomEleve= ecole.getEleves().get(i).getPrenom();
            if(id == iDEleve){
                labelBulletin.setText(nomEleve+" "+prenomEleve);
            }
        
        buttonBulletin.addActionListener(new ActionListener(){
            public void actionPerformed (ActionEvent e){
            if(!"".equals(debutBulletin.getText()) &&!"".equals(finBulletin.getText())&&!"".equals(anneeBulletin.getText())&&!"".equals(appBulletin.getText()) && !"Selectionner le trimestre".equals(trimestreBulletin.getSelectedItem())){
                String debut = debutBulletin.getText();
                String fin = finBulletin.getText();
                int annee = Integer.parseInt(anneeBulletin.getText());
                String appreciation = appBulletin.getText();
                int trimestre = Integer.parseInt(trimestreBulletin.getSelectedItem().toString());
                int id_eleve = elev.getId();
                Bulletin bu = new Bulletin(0, appreciation, trimestre, debut, fin, annee);
                try{
                    BulletinDAO buDao = new BulletinDAO();
                    EcoleDAO ecDao = new EcoleDAO();
                    if(buDao.create(bu, id_eleve)){
                        debutBulletin.setText("");
                        finBulletin.setText("");
                        anneeBulletin.setText("");
                        appBulletin.setText("");
                        trimestreBulletin.setSelectedItem("Selectionner le trimestre");
                        //recuperer dans la base de donnee
                        detailsBulletinN(trimestre, id_eleve,"");
                        rechercherEleve(id);
                        
                        ecole = ecDao.init();
                    }
                }catch(SQLException ex){
                    
                }
                
           
            }

            else{
            JOptionPane.showMessageDialog(null,"Veuillez remplir tous les champs");

        }
            }
        });
        }
    }
                
    private void buttonEnseignantsActionPerformed(java.awt.event.ActionEvent evt) {                                                  
        jPanel1.removeAll();  
        panelEnseignants.removeAll();
        panelEnseignants.add(accueilEnseignants);
        panelEnseignants.repaint();
        panelEnseignants.revalidate();
        jPanel1.add(panelEnseignants);
        jPanel1.repaint();
        jPanel1.revalidate();
        
        disciplineProf.addItem("Selectionner la discipline");
        for(int i = 0; i<ecole.getDisciplines().size(); i++){
            String c = ecole.getDisciplines().get(i);
            disciplineProf.addItem(c);
        }
        DefaultTableModel model = (DefaultTableModel)tabProfs.getModel();
        for(int t = 0; t<tabProfs.getRowCount(); t++){
                model.removeRow(t);
                t--;
            } 
        for(int i = 0; i<ecole.getProfs().size(); i++){
            
            String nomProf = ecole.getProfs().get(i).getNom();
            String prenomProf = ecole.getProfs().get(i).getPrenom();
            String discipline = ecole.getProfs().get(i).getDiscipline();                            
            model.addRow(new String[]{nomProf, prenomProf, discipline}); 
        }                                                               
        
        Object[] row = new Object[3];
            addProf.addActionListener(new ActionListener(){
                @Override
                public void actionPerformed(ActionEvent e){
                    if(!"".equals(nomProf.getText()) && !"".equals(prenomProf.getText())&& !"Selectionner la discipline".equals(disciplineProf.getSelectedItem())){
                        String nom = nomProf.getText();
                        String prenom = prenomProf.getText();
                        String discipline = disciplineProf.getSelectedItem().toString();
                        PersonneDAO persDao;
                        Enseignant en = new Enseignant(0, nom, prenom, discipline);
                        try {
                            persDao = new PersonneDAO();
                            EcoleDAO ecDao = new EcoleDAO();
                            if(persDao.create(en, 0)){
                                row[0] = nomProf.getText();
                                row[1] = prenomProf.getText();
                                row[2] = disciplineProf.getSelectedItem();
                                model.addRow(row);
                                nomProf.setText("");
                                prenomProf.setText("");
                                disciplineProf.setSelectedItem("Selectionner la discipline");
                                ecole = ecDao.init();
                            }
                            else JOptionPane.showMessageDialog(null,"Erreur lors de l'ajout √† la BDD" );
                            
                        } catch (SQLException ex) {
                            Logger.getLogger(Affichage.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        
                        
                    }
                    else{
                        JOptionPane.showMessageDialog(null,"Remplir tous les champs !" );
                    }
                }
            });

            deleteProf.addActionListener(new ActionListener(){
                @Override
                public void actionPerformed(ActionEvent e){
                    int i = tabProfs.getSelectedRow();
                    int id_prof = 0;
                    for(int f=0; f<ecole.getProfs().size(); f++){
                        id_prof = ecole.getProfs().get(f).getId();
                    }
                    if(i >= 0){
                        PersonneDAO persDao;
                        Enseignant en = new Enseignant(id_prof, "", "", "");
                        try {
                            persDao = new PersonneDAO();
                            EcoleDAO ecDao = new EcoleDAO();
                            if(persDao.delete(en)){
                                model.removeRow(i);
                                ecole = ecDao.init();
                            }
                            else JOptionPane.showMessageDialog(null,"Erreur lors de l'ajout √† la BDD" );
                            
                        } catch (SQLException ex) {
                            Logger.getLogger(Affichage.class.getName()).log(Level.SEVERE, null, ex);
                        }
                                                                                   
                    }
                    else{
                        JOptionPane.showMessageDialog(null,"Selectionnez l'enseignant");
                    }
                }
            });
            detailsProf.addActionListener(new ActionListener(){
            public void actionPerformed (ActionEvent e){
            int o = tabProfs.getSelectedRow();
            int j = ecole.getProfs().get(o).getId();
            if(o >= 0){
                rechercherEnseignant(j);
            }
            else{
                JOptionPane.showMessageDialog(null, "Selectionnez un enseignant pour voir le detail !");
            }
            }
            });
            
    }


    private void buttonDisciplinesActionPerformed(java.awt.event.ActionEvent evt) {                                                  
        jPanel1.removeAll();
        panelDisciplines.removeAll();
        panelDisciplines.add(accueilDisciplines);
        panelDisciplines.repaint();
        panelDisciplines.revalidate();
        jPanel1.add(panelDisciplines);
        jPanel1.repaint();
        jPanel1.revalidate(); 
        DefaultTableModel model = (DefaultTableModel)tabDisciplines.getModel();
        for(int t = 0; t<tabDisciplines.getRowCount(); t++){
                model.removeRow(t);
                t--;
            } 
        for(int i = 0; i<ecole.getDisciplines().size(); i++){
            System.out.println(ecole.getDisciplines().get(i));
                                      
            model.addRow(new String[]{ecole.getDisciplines().get(i)}); 
        }                                                               
        
        Object[] row = new Object[1];
            addDiscpline.addActionListener(new ActionListener(){
                @Override
                public void actionPerformed(ActionEvent e){
                    if(!"".equals(ajoutDiscipline.getText())){
                        String discipline = ajoutDiscipline.getText();
                        try {
                            EcoleDAO ecDao = new EcoleDAO();
                            if(ecDao.createDis(discipline)){
                                ecole = ecDao.init();
                                row[0] = discipline;
                                model.addRow(row);
                                ajoutDiscipline.setText("");
                            }else {
                                JOptionPane.showMessageDialog(null,"Erreur lors de l'ajout √† la BDD");
                            }
                        } catch (SQLException ex) {
                            System.out.println(ex.getMessage());
                        }  
                    }
                    else{
                        JOptionPane.showMessageDialog(null,"Notez le nom de la discipline" );
                    }
                }
            });

            deleteDiscipline.addActionListener(new ActionListener(){
                @Override
                public void actionPerformed(ActionEvent e){
                    int i = tabDisciplines.getSelectedRow();
                    if(i >= 0){
                        String discipline = model.getValueAt(i, 0).toString();
                        try {
                            EcoleDAO ecDao = new EcoleDAO();
                            if(ecDao.deleteDis(discipline)){
                                ecole = ecDao.init();
                                model.removeRow(i); 
                            }else {
                                JOptionPane.showMessageDialog(null,"Erreur lors de l'ajout √† la BDD");
                            }
                        } catch (SQLException ex) {
                            System.out.println(ex.getMessage());
                        }  
                                                                                  
                    }
                    else{
                        JOptionPane.showMessageDialog(null,"Selectionnez la discipline" );
                    }
                }
            });
    }

    private void menuEnseignantsMenuSelected(javax.swing.event.MenuEvent evt) {//GEN-FIRST:event_menuEnseignantsMenuSelected
        jPanel1.removeAll();
        jPanel1.add(panelEnseignants);
        jPanel1.repaint();
        jPanel1.revalidate();
    }//GEN-LAST:event_menuEnseignantsMenuSelected

    private void menuElevesMenuSelected(javax.swing.event.MenuEvent evt) {//GEN-FIRST:event_menuElevesMenuSelected
        jPanel1.removeAll();
        panelEleves.removeAll();
        panelEleves.add(accueilEleves);
        panelEleves.repaint();
        panelEleves.revalidate();
        jPanel1.add(panelEleves);
        jPanel1.repaint();
        jPanel1.revalidate();
    }//GEN-LAST:event_menuElevesMenuSelected

    private void menuAccueilMenuSelected(javax.swing.event.MenuEvent evt) {//GEN-FIRST:event_menuAccueilMenuSelected
        jPanel1.removeAll();
        panelEnseignants.removeAll();
        panelEnseignants.add(accueilEnseignants);
        panelEnseignants.repaint();
        panelEnseignants.revalidate();
        jPanel1.add(panelMenu);
        jPanel1.repaint();
        jPanel1.revalidate();
    }//GEN-LAST:event_menuAccueilMenuSelected

    private void menuDisciplinesMenuSelected(javax.swing.event.MenuEvent evt) {//GEN-FIRST:event_menuDisciplinesMenuSelected
        jPanel1.removeAll();
        panelDisciplines.removeAll();
        panelDisciplines.add(accueilDisciplines);
        panelDisciplines.repaint();
        panelDisciplines.revalidate();
        jPanel1.add(panelDisciplines);
        jPanel1.repaint();
        jPanel1.revalidate();
    }//GEN-LAST:event_menuDisciplinesMenuSelected

    private void buttonRechercheEleveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonRechercheEleveActionPerformed
        String nomEleve;
        int id = 0;
        nomEleve = fieldEleves.getText();
        for(int i = 0; i<ecole.getEleves().size(); i++){
            if(ecole.getEleves().get(i).getNom().equals(nomEleve)){
                id = ecole.getEleves().get(i).getId();
            }
        }
        System.out.println("Nom de l'√©l√®ve recherche: "+nomEleve);
        rechercherEleve(id);
    }//GEN-LAST:event_buttonRechercheEleveActionPerformed

    private void afficherBulletinN(int b, int id, Eleve eleve){
        boolean success = false;  

        DefaultTableModel model = (DefaultTableModel)bulletinEleve.getModel();
        for(int t = 0; t<bulletinEleve.getRowCount(); t++){
            model.removeRow(t);
            t--;
        } 
        fieldDiscipline.removeAll();
        fieldProf.removeAll();
        fieldDiscipline.addItem("Selectionner la discipline");
        for(int i = 0; i<ecole.getDisciplines().size(); i++){
            String c = ecole.getDisciplines().get(i);
            fieldDiscipline.addItem(c);
        }
        fieldProf.addItem("Selectionner l'enseignant");
        for(int i = 0; i<ecole.getProfs().size(); i++){
            String c = ecole.getProfs().get(i).getNom() + " " + ecole.getProfs().get(i).getPrenom();
            fieldProf.addItem(c);
        }
        for(int i = 0; i<ecole.getClasses().size(); i++){
            Classe c = ecole.getClasses().get(i);
            for(int j=0; j<c.getEleves().size(); j++)
            {
                int idEleve = c.getEleves().get(j).getId();
                String nomEleve = c.getEleves().get(j).getNom();
                String prenomEleve = c.getEleves().get(j).getPrenom();
                if(idEleve == id){
                    success = true;
                    Eleve e = c.getEleves().get(j);
                    e.afficherBulletin();
                    for(int k=0; k<e.getBulletin().size(); k++){
                        Bulletin bu = e.getBulletin().get(k);
                        if(bu.getNumero()==b){
                            eleve.setId(bu.getId());
                          
                            for(int l = 0; l<bu.getDetails().size(); l++){
                                double moyenne = bu.getDetails().get(l).moyenneEval();
                                
                                model.addRow(new String[]{bu.getDetails().get(l).getDiscipline(),
                                bu.getDetails().get(l).getProf(),
                                Double.toString(moyenne),
                                bu.getDetails().get(l).getAppreciation()
                                });                                                                
                            }
                            
                            Object[] row = new Object[4];
                            addDB.addActionListener(new ActionListener(){
                            @Override
                            public void actionPerformed(ActionEvent e){
                                System.out.println("vfvkrj");
                                if(!"".equals(fieldApp.getText()) && !"Selectionner la discipline".equals(fieldDiscipline.getSelectedItem()) && !"Selectionner l'enseignant".equals(fieldProf.getSelectedItem())){
                                    String discipline = fieldDiscipline.getSelectedItem().toString();
                                    String prof = fieldProf.getSelectedItem().toString();
                                    String app = fieldApp.getText();
                                    int id_bu = eleve.getId();
                                    System.out.println("Id bu : "+id_bu);
                                    DetailBulletin dbu = new DetailBulletin(0, app, prof, discipline);
                                    try{
                                        DetailBulletinDAO dbDao = new DetailBulletinDAO();
                                        EcoleDAO ecDao = new EcoleDAO();
                                        if(dbDao.create(dbu, id_bu)){
                                            row[0] = discipline;
                                            row[1] = prof;
                                            row[3] = app;
                                            model.addRow(row);
                                            fieldApp.setText("");
                                            fieldProf.setSelectedItem("Selectionner l'enseignant");
                                            fieldDiscipline.setSelectedItem("Selectionner la discipline");
                                            
                                            ecole = ecDao.init();
                                        }
                                        
                                    }catch(SQLException ex){
                                        
                                    }
                                    
                                    

                                } 
                                else{
                                    JOptionPane.showMessageDialog(null," remplir tous les champs");
                                }
                            }
                        });
                        }
                    }
                }
                
            }
        }
    }
    
    private void detailsBulletinN(int b, int id, String discipline){
        System.out.println("Numero b : "+b+ " Id eleve: "+id+" Discipline : "+discipline);
        DefaultTableModel model = (DefaultTableModel)tabDetailsBulletin.getModel();
        for(int t = 0; t<tabDetailsBulletin.getRowCount(); t++){
            model.removeRow(t);
            t--;
        }  
        jPanel1.removeAll();
        panelEleves.removeAll();
        panelEleves.add(detailsBulletinEleve);
        for(int i = 0; i<ecole.getClasses().size(); i++){
            Classe c = ecole.getClasses().get(i);
            for(int j=0; j<c.getEleves().size(); j++)
            {
                int idEleve = c.getEleves().get(j).getId();
                if(idEleve == id){
                    Eleve e = c.getEleves().get(j);
                    e.afficherBulletin();
                    for(int k=0; k<e.getBulletin().size(); k++){
                        Bulletin bu = e.getBulletin().get(k);
                        if(bu.getId() == b){
                            System.out.println("Je rentre ICI ");
                            
                            for(int l = 0; l<bu.getDetails().size(); l++){
                                DetailBulletin dbu = bu.getDetails().get(l);
                                elev.setId(dbu.getId());
                                String matiere = bu.getDetails().get(l).getDiscipline();
                                if(matiere.equals(discipline)){
                                    System.out.println("Je rentre ET LA ");
                                    for(int m = 0; m<bu.getDetails().get(l).getEvals().size(); m++){                                       
                                        float note = bu.getDetails().get(l).getEvals().get(m).getNote();
                                        String appreciation = bu.getDetails().get(l).getEvals().get(m).getAppreciation();
                                        model.addRow(new String[]{Float.toString(note),appreciation});
                                        
                                        
                                    }
                                    Object[] row = new Object[2];
                                        add.addActionListener(new ActionListener(){
                                            @Override
                                            public void actionPerformed(ActionEvent e){
                                                if(!newNote.getText().equals("")){
                                                    
                                                    float note = Float.parseFloat(newNote.getText());
                                                    String appreciation = newApp.getText();
                                                    try {
                                                        EvaluationDAO evalDao = new EvaluationDAO();
                                                        EcoleDAO ecDao = new EcoleDAO();
                                                        Evaluation evl = new Evaluation(0, 0, note, appreciation);
                                                        if(evalDao.create(evl, elev.getId())){
                                                            System.out.println("Je rentre ici ");
                                                            row[0] = newNote.getText();
                                                            row[1] = newApp.getText();
                                                            model.addRow(row);
                                                            newNote.setText("");
                                                            newApp.setText("");
                                                            ecole = ecDao.init();
                                                        }
                                                    } catch (SQLException ex) {
                                                    
                                                        }
                                                }    
                                            }
                                        });
                                        
                                        delete.addActionListener(new ActionListener(){
                                            @Override
                                            public void actionPerformed(ActionEvent e){
                                                
                                                int i = tabDetailsBulletin.getSelectedRow();
                                                int id_eval = 0;
                                                for(int j=0; j<dbu.getEvals().size(); j++){
                                                    if(j == i)id_eval = dbu.getEvals().get(j).getId();
                                                }
                                                if(i >= 0){
                                                    try {
                                                        EcoleDAO ecDao = new EcoleDAO();
                                                        EvaluationDAO evalDao = new EvaluationDAO();
                                                        Evaluation evl = new Evaluation(id_eval, 0, 0.0f, "");
                                                        if(evalDao.delete(evl)){
                                                            model.removeRow(i); 
                                                            ecDao.init();
                                                        }
                                                    } catch (SQLException ex) {
                                                    
                                                        }
                                                                                                              
                                                }
                                                else{
                                                    JOptionPane.showMessageDialog(null,"Selectionnez une note" );
                                                }
                                                }
                                        });
                            }
                            
                        }
                    }
                }
            }
        } 
        panelEleves.repaint();
        panelEleves.revalidate();
        jPanel1.add(panelEleves);
        jPanel1.repaint();
        jPanel1.revalidate();
        }
    }
    
    private void rechercherEleve(int id){
        boolean trouve = false;
        int k = 0;
        elev.setId(id);
        Eleve eleve = new Eleve();
        jPanel1.removeAll();
        panelEleves.removeAll();
        for(int i = 0; i<ecole.getClasses().size(); i++){
            Classe c = ecole.getClasses().get(i);
            for(int j=0; j<c.getEleves().size(); j++)
            {
                int idEleve = c.getEleves().get(j).getId();
                String nomEleve = c.getEleves().get(j).getNom();
                String prenomEleve = c.getEleves().get(j).getPrenom();
                System.out.println("nom de l'eleve: "+nomEleve);
                if(idEleve == id){
                    c.getEleves().get(j).afficherBulletin();
                    labelEleve.setText(nomEleve+" "+prenomEleve);
                    System.out.println("taille: "+c.getEleves().get(j).getBulletin().size()); 
                    JOptionPane.showMessageDialog(null, "Selectionnez un trimestre !");
                    trimestre1.addActionListener(new ActionListener(){
                            public void actionPerformed (ActionEvent e){
                                afficherBulletinN(1, elev.getId(), eleve);
                            }
                        });
                    trimestre2.addActionListener(new ActionListener(){
                            public void actionPerformed (ActionEvent e){
                                afficherBulletinN(2, elev.getId(), eleve);
                            }
                        });
                    trimestre3.addActionListener(new ActionListener(){
                            public void actionPerformed (ActionEvent e){
                                afficherBulletinN(3, elev.getId(), eleve);
                            }
                        });
                    trouve = true;
                }
            } 
        }
        if(trouve == false){
            JOptionPane.showMessageDialog(null, "L'√©l√®ve n'a pas √©t√© trouv√©");
        }
        DefaultTableModel model = (DefaultTableModel)bulletinEleve.getModel();
        detailsBulletin.addActionListener(new ActionListener(){
        public void actionPerformed (ActionEvent e){
            int o = bulletinEleve.getSelectedRow();
            
            System.out.println(o);
            if(o >= 0){
                String discipline = model.getValueAt(o,0).toString();
                detailsBulletinN(eleve.getId(), id, discipline);//num bulletin, id eleve, matiere
            }
            else{
                JOptionPane.showMessageDialog(null, "Selectionnez une mati√®re pour voir le detail !");
            }
            
        }
        });
        panelEleves.add(rechercherEleve);
        panelEleves.repaint();
        panelEleves.revalidate();
        jPanel1.add(panelEleves);
        jPanel1.repaint();
        jPanel1.revalidate();
    }
    
    private void rechercherEnseignant(int id){
        boolean trouve = false;
        panelEnseignants.removeAll();
        panelEnseignants.add(rechercherEnseignant);
        panelEnseignants.repaint();
        panelEnseignants.revalidate();
        jPanel1.add(panelEnseignants);
        jPanel1.repaint();
        jPanel1.revalidate(); 
        DefaultTableModel model = (DefaultTableModel)tabClassesProf.getModel();
        for(int t = 0; t<tabClassesProf.getRowCount(); t++){
                model.removeRow(t);
                t--;
            } 
        comboClassesProf.removeAll();
        comboClassesProf.addItem("Selectionner une classe");
        for(int i = 0; i<ecole.getClasses().size(); i++){
            String c = ecole.getClasses().get(i).getNom();
            comboClassesProf.addItem(c);
        }
        for(int i = 0; i<ecole.getClasses().size(); i++){
            Classe c =ecole.getClasses().get(i);
            for(int j = 0; j<c.getProfs().size(); j++){
                int idProf = c.getProfs().get(j).getId();
                if(idProf == id){
                    String nom = c.getProfs().get(j).getNom(); 
                    String prenom = c.getProfs().get(j).getPrenom();
                    String classe = c.getNom();
                    model.addRow(new String[]{classe}); 
                    labelProf.setText("Le professeur "+nom+" "+prenom);
                }
                
            }    
        }                                                               
        
        Object[] row = new Object[1];
            addClasseProf.addActionListener(new ActionListener(){
                @Override
                public void actionPerformed(ActionEvent e){
                    if(!"Selectionner une classe".equals(comboClassesProf.getSelectedItem())){
                        int id_prof = id;
                        int id_ecole = 0;
                        String discipline = "";
                        
                        String nom = comboClassesProf.getSelectedItem().toString();
                        for(int i=0; i<ecole.getClasses().size(); i++){
                            Classe c = ecole.getClasses().get(i);
                            if(nom.equals(ecole.getClasses().get(i).getNom())){
                                id_ecole = c.getId();
                            }
                            for(int j=0; j<c.getProfs().size(); j++){
                                if(c.getProfs().get(j).getId()==id_prof){
                                    discipline = c.getProfs().get(j).getDiscipline();
                                }
                            }
                        }
                        try {
                            PersonneDAO persDao = new PersonneDAO();
                            EcoleDAO ecDao = new EcoleDAO();
                            if(persDao.createEnseig(id_prof, id_ecole, discipline)){
                                row[0] = nom;
                                model.addRow(row);
                                comboClassesProf.setSelectedItem("Selectionner une classe");
                                ecole = ecDao.init();
                            }
                            else JOptionPane.showMessageDialog(null,"Erreur Ajout BDD" );
                        } catch (SQLException ex) {
                            Logger.getLogger(Affichage.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                    else{
                        JOptionPane.showMessageDialog(null,"Notez le nom du niveau" );
                    }
                }
            });

//            deleteClasseProf.addActionListener(new ActionListener(){
//                @Override
//                public void actionPerformed(ActionEvent e){
//                    int i = tabClassesProf.getSelectedRow();
//                    if(i >= 0){
//                        String classe = model.getValueAt(i, 0).toString();
//                        //Supprimer de la BDD
//                        model.removeRow(i);
//                        
//                        try {
//                            EcoleDAO ecoleDao = new EcoleDAO();
//                            ecole = ecoleDao.init();
//                        } catch (SQLException ex) {
//                            System.out.println(ex.getMessage());
//                        }
//                        
//                    }
//                    else{
//                        JOptionPane.showMessageDialog(null,"Selectionnez la classe" );
//                    }
//                }
//            });

    }
private void rechercherClasse(int id){
        panelClasses.removeAll();
        panelClasses.add(rechercherClasse);
        panelClasses.repaint();
        panelClasses.revalidate();
        jPanel1.add(panelClasses);
        jPanel1.repaint();
        jPanel1.revalidate(); 
        DefaultTableModel model = (DefaultTableModel)tabProfsClasse.getModel();
        DefaultTableModel model2 = (DefaultTableModel)tabElevesClasse.getModel();
        for(int t = 0; t<tabProfsClasse.getRowCount(); t++){
                model.removeRow(t);
                t--;
            } 
        for(int t = 0; t<tabElevesClasse.getRowCount(); t++){
                model.removeRow(t);
                t--;
            } 
        for(int i = 0; i<ecole.getClasses().size(); i++){
            Classe c =ecole.getClasses().get(i);
            int idClasse = c.getId();
            String classe = c.getNom();
            if(idClasse == id){
                for(int j = 0; j<c.getProfs().size(); j++){
                    String nom = c.getProfs().get(j).getNom(); 
                    String discipline = c.getProfs().get(j).getDiscipline();
                    model.addRow(new String[]{nom, discipline}); 
                }
                for(int k = 0; k<c.getEleves().size(); k++){
                    String nom = c.getEleves().get(k).getNom(); 
                    String prenom = c.getProfs().get(k).getPrenom();
                    model2.addRow(new String[]{nom, prenom}); 
                }  
                    labelDetailsClasse.setText("Voici les d√©tails de la classe "+classe);
                    
                    Object[] row = new Object[2];
                    addProfClasse.addActionListener(new ActionListener(){
                    @Override
                        public void actionPerformed(ActionEvent e){
                            
                            if(!"".equals(nomProfClasse.getText()) && !"".equals(disciplineProfClasse.getText())){
                                String nom = nomProfClasse.getText();
                                String discipline = disciplineProfClasse.getText();
                                
                                int id_prof = 0;
                                for(int i=0; i<ecole.getProfs().size(); i++){
                                    Enseignant en = ecole.getProfs().get(i);
                                    System.out.println("Id prof : "+en.getId()+" Blase : "+en.getNom()+" "+en.getPrenom());
                                    if(nom.equals(en.getNom()+" "+en.getPrenom())){
                                        id_prof = en.getId();
                                    }
                                }
                                System.out.println("L'id du prof : "+id_prof+" Nom prof et discipline : "+nom+" "+discipline);
                                Enseignant ens = new Enseignant(id_prof, "", "", "");
                                try{
                                    PersonneDAO persDao = new PersonneDAO();
                                    EcoleDAO ecDao = new EcoleDAO();
                                    if(persDao.createEnseig(id_prof, id, discipline)){
                                        row[0] = nomProfClasse.getText();
                                        row[1] = disciplineProfClasse.getText();
                                        model.addRow(row);
                                        nomProfClasse.setText("");
                                        disciplineProfClasse.setText("");

                                        ecole = ecDao.init();
                                    }else JOptionPane.showMessageDialog(null,"Erreur lors de l'ajout BDD" );
                                }catch(SQLException ex){

                                }

                            }
                            else{
                                JOptionPane.showMessageDialog(null,"Remplir tous les champs !" );
                            }
                        }
                    });
                }
            
                
            }
        
                                                                       
        
        

            

    }
    private void buttonRechercheEnseignantActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonRechercheEnseignantActionPerformed
        String nomEnseignant;
        boolean trouve = false;
        nomEnseignant = fieldEnseignants.getText();
        fieldEnseignants.setText("");
        System.out.println("Nom de l'enseignant recherche: "+nomEnseignant);

    }//GEN-LAST:event_buttonRechercheEnseignantActionPerformed

    private void buttonNiveauActionPerformed(java.awt.event.ActionEvent evt) {                                             
        jPanel1.removeAll();
        panelNiveau.removeAll();
        panelNiveau.add(accueilNiveau);
        panelNiveau.repaint();
        panelNiveau.revalidate();
        jPanel1.add(panelNiveau);
        jPanel1.repaint();
        jPanel1.revalidate();
        DefaultTableModel model = (DefaultTableModel)tabNiveaux.getModel();
        for(int t = 0; t<tabNiveaux.getRowCount(); t++){
                model.removeRow(t);
                t--;
            } 
        for(int i = 0; i<ecole.getNiveau().size(); i++){
            System.out.println(ecole.getNiveau().get(i));
                                      
            model.addRow(new String[]{ecole.getNiveau().get(i)}); 
        }                                                               
        
        Object[] row = new Object[1];
            addNiveau.addActionListener(new ActionListener(){
                @Override
                public void actionPerformed(ActionEvent e){
                    if(!"".equals(ajoutNiveau.getText())){
                        EcoleDAO ecDao;
                        String niveau = ajoutNiveau.getText();
                        try {
                            ecDao = new EcoleDAO();
                            if(ecDao.createNiveau(niveau)){
                                row[0] = niveau;
                                model.addRow(row);
                                ajoutNiveau.setText("");
                                ecole = ecDao.init();
                            }
                            else JOptionPane.showMessageDialog(null,"Erreur d'ajout dans la BDD");
                            
                        } catch (SQLException ex) {
                            
                        }
                        
                        
                    }
                    else{
                        JOptionPane.showMessageDialog(null,"Notez le nom du niveau" );
                    }
                }
            });

            deleteNiveau.addActionListener(new ActionListener(){
                @Override
                public void actionPerformed(ActionEvent e){
                    int i = tabNiveaux.getSelectedRow();
                    if(i >= 0){
                        EcoleDAO ecDao;
                        String niveau = model.getValueAt(i, 0).toString();
                        try {
                            ecDao = new EcoleDAO();
                            if(ecDao.deleteNiveau(niveau)){
                                model.removeRow(i);
                                ecole = ecDao.init();
                            }
                            else JOptionPane.showMessageDialog(null,"Erreur de suppression dans la BDD" );
                        } catch (SQLException ex) {
                            
                        } 
                    }
                    else{
                        JOptionPane.showMessageDialog(null,"Selectionnez le niveau" );
                    }
                }
            });
    }

    private void fieldElevesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fieldElevesActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fieldElevesActionPerformed

    private void trimestre1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_trimestre1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_trimestre1ActionPerformed
    private void buttonClassesActionPerformed(java.awt.event.ActionEvent evt) {                                              
        jPanel1.removeAll();
        panelClasses.removeAll();
        panelClasses.add(accueilClasses);
        panelClasses.repaint();
        panelClasses.revalidate();
        jPanel1.add(panelClasses);
        jPanel1.repaint();
        jPanel1.revalidate();
        niveauClasse.addItem("Selectionner le niveau");
        for(int i = 0; i<ecole.getNiveau().size(); i++){
            String c = ecole.getNiveau().get(i);
            niveauClasse.addItem(c);
        }
        DefaultTableModel model = (DefaultTableModel)tabClasses.getModel();
        for(int t = 0; t<tabClasses.getRowCount(); t++){
                model.removeRow(t);
                t--;
            } 
        for(int i = 0; i<ecole.getClasses().size(); i++){
            
            String nom = ecole.getClasses().get(i).getNom();
            String niveau = ecole.getClasses().get(i).getNiveau();
            int annee = ecole.getClasses().get(i).getAnnee();                            
            model.addRow(new String[]{nom, niveau, Integer.toString(annee)}); 
        }                                                               
        
        Object[] row = new Object[3];
            addClasse.addActionListener(new ActionListener(){
                @Override
                public void actionPerformed(ActionEvent e){
                    if(!"".equals(nomClasse.getText()) && !"".equals(anneeClasse.getText())&& !"Selectionner la niveau".equals(niveauClasse.getSelectedItem())){
                        String nom_classe = nomClasse.getText();
                        int annee = Integer.parseInt(anneeClasse.getText());
                        String niveau = niveauClasse.getSelectedItem().toString();
                        Classe cl = new Classe(0, nom_classe, niveau, annee);
                        
                        try{
                            ClasseDAO clDao = new ClasseDAO();
                            EcoleDAO ecDao = new EcoleDAO();
                            System.out.println("Id ecole : "+ecole.getId());
                            if(clDao.create(cl, ecole.getId())){
                                row[0] = nomClasse.getText();
                                row[1] = anneeClasse.getText();
                                row[2] = niveauClasse.getSelectedItem();
                                model.addRow(row);
                                nomClasse.setText("");
                                anneeClasse.setText("");
                                niveauClasse.setSelectedItem("Selectionner la niveau");
                                
                                ecDao.init();
                            }
                        }catch(SQLException ex){
                            
                        }
                    } 
                    else{
                        JOptionPane.showMessageDialog(null,"Remplir tous les champs !" );
                    }
                }
            });

            deleteClasse.addActionListener(new ActionListener(){
                @Override
                public void actionPerformed(ActionEvent e){
                    int i = tabClasses.getSelectedRow();
                    
                    if(i >= 0){
                        model.removeRow(i);                                                           
                    }
                    else{
                        JOptionPane.showMessageDialog(null,"Selectionnez la classe");
                    }
                }
            });
            detailsClasse.addActionListener(new ActionListener(){
            public void actionPerformed (ActionEvent e){
            int o = tabClasses.getSelectedRow();
            int j = ecole.getClasses().get(o).getId();
            System.out.println("Je suis la classe d'id : "+j);
            if(o >= 0){
                rechercherClasse(j);
            }
            else{
                JOptionPane.showMessageDialog(null, "Selectionnez une classe pour voir les details !");
            }
            }
            });
            
    } 
    private void UpdateAppActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UpdateAppActionPerformed
        int i = bulletinEleve.getSelectedRow();
        DefaultTableModel model = (DefaultTableModel)bulletinEleve.getModel();
        if(i>=0){
            model.setValueAt(fieldApp.getText(), i,3);
        }
        else{
            JOptionPane.showMessageDialog(null, "Selectionnez!");
        }
    }//GEN-LAST:event_UpdateAppActionPerformed

    private void fieldAppActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fieldAppActionPerformed
         
    }//GEN-LAST:event_fieldAppActionPerformed

    private void tabDetailsBulletinMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tabDetailsBulletinMouseClicked
       DefaultTableModel model = (DefaultTableModel)tabDetailsBulletin.getModel();
       int i=tabDetailsBulletin.getSelectedRow();
       newNote.setText(model.getValueAt(i,0).toString());
       newApp.setText(model.getValueAt(i,1).toString());
    }//GEN-LAST:event_tabDetailsBulletinMouseClicked

    private void updateActionPerformed(java.awt.event.ActionEvent evt) {                                       
        int i = tabDetailsBulletin.getSelectedRow();
        int id_eval = 0;
        for(int a=0; a<ecole.getClasses().size(); a++){
            Classe cl = ecole.getClasses().get(a);
            for(int b=0; b<cl.getEleves().size(); b++){
                Eleve el = cl.getEleves().get(b);
                for(int c=0; c<el.getBulletin().size(); c++){
                    Bulletin bu = el.getBulletin().get(c);
                    for(int d=0; d<bu.getDetails().size(); d++){
                        DetailBulletin dbu = bu.getDetails().get(d);
                        for(int j=0; j<dbu.getEvals().size(); j++){
                            if(j == i)id_eval = dbu.getEvals().get(j).getId();
                        }
                    }
                }
            }
        }
        
        DefaultTableModel model = (DefaultTableModel)tabDetailsBulletin.getModel();
        if(i>=0){
            if(!newNote.getText().equals("")){
                float note = Float.parseFloat(newNote.getText());
                String appreciation = newApp.getText();
                EvaluationDAO evalDao;
                try {
                    evalDao = new EvaluationDAO();
                    EcoleDAO ecDao = new EcoleDAO();
                    if(evalDao.updateEval(id_eval, note, appreciation)){
                        model.setValueAt(newNote.getText(), i,0);
                        model.setValueAt(newApp.getText(), i,1);
                        ecDao.init();
                    }
                    
                } catch (SQLException ex) {
                    
                }
                
            }
            
        }
        else{
            JOptionPane.showMessageDialog(null, "Selectionnez une note √† modifier !");
        }
    }

    private void bulletinEleveMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bulletinEleveMouseClicked
        DefaultTableModel model = (DefaultTableModel)bulletinEleve.getModel();
        int m = bulletinEleve.getSelectedRow();
        fieldApp.setText(model.getValueAt(m,3).toString());

    }//GEN-LAST:event_bulletinEleveMouseClicked

    private void ajoutNiveauActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ajoutNiveauActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ajoutNiveauActionPerformed

    private void prenomProfActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_prenomProfActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_prenomProfActionPerformed

    private void addProfActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addProfActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_addProfActionPerformed

    private void tabProfsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tabProfsMouseClicked
      
    }//GEN-LAST:event_tabProfsMouseClicked

    private void updateEleveActionPerformed(java.awt.event.ActionEvent evt) {                                            
        int i = tabEleves.getSelectedRow();
        int cpt = 0;
        int id_eleve = 0;
        for(int j=0; j<ecole.getClasses().size(); j++){
            Classe c = ecole.getClasses().get(j);
            for(int k=0; k<c.getEleves().size(); k++){
                Eleve ev = c.getEleves().get(k);
                if(cpt == i){
                    id_eleve = ev.getId();
                }
                cpt++;
            }
        }
        DefaultTableModel model = (DefaultTableModel)tabEleves.getModel();
        if(i>=0){
            String nom_classe = classeEleve.getSelectedItem().toString();
            int id_classe = 0;
            System.out.println("Nom classe : "+nom_classe);
            for(int j=0; j<ecole.getClasses().size(); j++){
                if(ecole.getClasses().get(j).getNom().equals(nom_classe)){
                    id_classe = ecole.getClasses().get(j).getId();
                }
            }
            Eleve eleve = new Eleve(id_eleve, "", "");
            try{
                PersonneDAO persDao = new PersonneDAO();
                EcoleDAO ecDao = new EcoleDAO();
                persDao.updateInscri(eleve, id_classe);
                model.setValueAt(classeEleve.getSelectedItem().toString(), i,2);
                
                ecDao.init();
            }catch(SQLException e){
                
            }
            
        }
        else{
            JOptionPane.showMessageDialog(null, "Selectionnez un √©l√®ve !");
        }
    }

    private void tabElevesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tabElevesMouseClicked
        DefaultTableModel model = (DefaultTableModel)tabEleves.getModel();
        int m = tabEleves.getSelectedRow();
        classeEleve.setSelectedItem(model.getValueAt(m,2).toString());
    }//GEN-LAST:event_tabElevesMouseClicked

    private void anneeClasseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_anneeClasseActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_anneeClasseActionPerformed

    private void detailsClasseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_detailsClasseActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_detailsClasseActionPerformed

    private void reportingElevesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reportingElevesActionPerformed
        ecole.afficherCamembert();
        ecole.Histo();
    }//GEN-LAST:event_reportingElevesActionPerformed

    private void reportingProfsActionPerformed(java.awt.event.ActionEvent evt){
       
    }
    private void prenomEleveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_prenomEleveActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_prenomEleveActionPerformed

    private void finBulletinActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_finBulletinActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_finBulletinActionPerformed

    private void appBulletinActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_appBulletinActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_appBulletinActionPerformed

    private void debutBulletinActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_debutBulletinActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_debutBulletinActionPerformed

    private void anneeBulletinActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_anneeBulletinActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_anneeBulletinActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try{
            EcoleDAO ecoleDao = new EcoleDAO();
            ecole = ecoleDao.init();
        //    Ecole e = ecoleDao.find(1);
        }catch(SQLException e){
            System.out.println(e.getMessage());
        }
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Affichage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Affichage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Affichage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Affichage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Affichage().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton UpdateApp;
    private javax.swing.JPanel accueilClasses;
    private javax.swing.JPanel accueilDisciplines;
    private javax.swing.JPanel accueilEleves;
    private javax.swing.JPanel accueilEnseignants;
    private javax.swing.JPanel accueilNiveau;
    private javax.swing.JButton add;
    private javax.swing.JButton addClasse;
    private javax.swing.JButton addClasseProf;
    private javax.swing.JButton addDB;
    private javax.swing.JButton addDiscpline;
    private javax.swing.JButton addEleve;
    private javax.swing.JButton addNiveau;
    private javax.swing.JButton addProf;
    private javax.swing.JButton addProfClasse;
    private javax.swing.JTextField ajoutDiscipline;
    private javax.swing.JTextField ajoutNiveau;
    private javax.swing.JPanel ajouterBulletin;
    private javax.swing.JTextField anneeBulletin;
    private javax.swing.JTextField anneeClasse;
    private javax.swing.JTextField appBulletin;
    private javax.swing.JTable bulletinEleve;
    private javax.swing.JButton buttonAjoutBulletin;
    private javax.swing.JButton buttonBulletin;
    private javax.swing.JButton buttonClasses;
    private javax.swing.JButton buttonDisciplines;
    private javax.swing.JButton buttonEleves;
    private javax.swing.JButton buttonEnseignants;
    private javax.swing.JButton buttonNiveau;
    private javax.swing.JButton buttonRechercheEleve;
    private javax.swing.JButton buttonRechercheEnseignant;
    private javax.swing.JComboBox<String> classeEleve;
    private javax.swing.JComboBox<String> comboClassesProf;
    private javax.swing.JTextField debutBulletin;
    private javax.swing.JButton delete;
    private javax.swing.JButton deleteClasse;
    private javax.swing.JButton deleteClasseProf;
    private javax.swing.JButton deleteDiscipline;
    private javax.swing.JButton deleteEleve;
    private javax.swing.JButton deleteNiveau;
    private javax.swing.JButton deleteProf;
    private javax.swing.JButton detailsBulletin;
    private javax.swing.JPanel detailsBulletinEleve;
    private javax.swing.JButton detailsClasse;
    private javax.swing.JButton detailsEleve;
    private javax.swing.JButton detailsProf;
    private javax.swing.JComboBox<String> disciplineProf;
    private javax.swing.JTextField disciplineProfClasse;
    private javax.swing.JTextField fieldApp;
    private javax.swing.JComboBox<String> fieldDiscipline;
    private javax.swing.JTextField fieldEleves;
    private javax.swing.JTextField fieldEnseignants;
    private javax.swing.JComboBox<String> fieldProf;
    private javax.swing.JTextField finBulletin;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane10;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JLabel labelBulletin;
    private javax.swing.JLabel labelDetailsClasse;
    private javax.swing.JLabel labelEleve;
    private javax.swing.JLabel labelProf;
    private javax.swing.JMenu menuAccueil;
    private javax.swing.JMenu menuDisciplines;
    private javax.swing.JMenu menuEleves;
    private javax.swing.JMenu menuEnseignants;
    private javax.swing.JTextField newApp;
    private javax.swing.JTextField newNote;
    private javax.swing.JComboBox<String> niveauClasse;
    private javax.swing.JTextField nomClasse;
    private javax.swing.JTextField nomEleve;
    private javax.swing.JTextField nomProf;
    private javax.swing.JTextField nomProfClasse;
    private javax.swing.JPanel panelClasses;
    private javax.swing.JPanel panelDisciplines;
    private javax.swing.JPanel panelEleves;
    private javax.swing.JPanel panelEnseignants;
    private javax.swing.JPanel panelMenu;
    private javax.swing.JPanel panelNiveau;
    private javax.swing.JTextField prenomEleve;
    private javax.swing.JTextField prenomProf;
    private javax.swing.JPanel rechercherClasse;
    private javax.swing.JPanel rechercherEleve;
    private javax.swing.JPanel rechercherEnseignant;
    private javax.swing.JPanel reportEleves;
    private javax.swing.JPanel reportEnseignants;
    private javax.swing.JButton reportingEleves;
    private javax.swing.JButton reportingProfs;
    private javax.swing.JTable tabClasses;
    private javax.swing.JTable tabClassesProf;
    private javax.swing.JTable tabDetailsBulletin;
    private javax.swing.JTable tabDisciplines;
    private javax.swing.JTable tabEleves;
    private javax.swing.JTable tabElevesClasse;
    private javax.swing.JTable tabNiveaux;
    private javax.swing.JTable tabProfs;
    private javax.swing.JTable tabProfsClasse;
    private javax.swing.JButton trimestre1;
    private javax.swing.JButton trimestre2;
    private javax.swing.JButton trimestre3;
    private javax.swing.JComboBox<String> trimestreBulletin;
    private javax.swing.JButton update;
    private javax.swing.JButton updateEleve;
    // End of variables declaration//GEN-END:variables
}
